// <auto-generated />
using System;
using EFCoreAIGS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCoreAIGS.Data.Migrations
{
    [DbContext(typeof(AIGSContext))]
    [Migration("20220606081733_configNameConvationAndSetdefaultMaxString")]
    partial class configNameConvationAndSetdefaultMaxString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasPrecision(10, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CreditCardNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("credit_card_number");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<double>("TotalIncomeAmount")
                        .HasPrecision(10, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("total_income_amount");

                    b.Property<double>("TotalOutcomeAmount")
                        .HasPrecision(10, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("total_outcome_amount");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_credit_card");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("ix_credit_card_employee_id");

                    b.ToTable("credit_card", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("Hired")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("hired");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_employees_id");

                    b.ToTable("employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "default first name",
                            Hired = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "default last name",
                            Version = 0
                        });
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.Spend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("IncomeSpendingDetailsId")
                        .HasColumnType("integer")
                        .HasColumnName("income_spending_details_id");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<int>("OutcomeSpendingDetailsId")
                        .HasColumnType("integer")
                        .HasColumnName("outcome_spending_details_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_spend");

                    b.HasIndex("IncomeSpendingDetailsId")
                        .HasDatabaseName("ix_spend_income_spending_details_id");

                    b.HasIndex("OutcomeSpendingDetailsId")
                        .HasDatabaseName("ix_spend_outcome_spending_details_id");

                    b.ToTable("spend", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.SpendingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<string>("SpentOn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("spent_on");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_spending_details");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_spending_details_employee_id");

                    b.ToTable("spending_details", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.CreditCard", b =>
                {
                    b.HasOne("EFCoreAIGS.Data.Entities.Employee", "Employee")
                        .WithOne("CreditCard")
                        .HasForeignKey("EFCoreAIGS.Data.Entities.CreditCard", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_credit_card_employees_employee_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.Spend", b =>
                {
                    b.HasOne("EFCoreAIGS.Data.Entities.SpendingDetails", "IncomeSpendingDetails")
                        .WithMany("IncomeSpend")
                        .HasForeignKey("IncomeSpendingDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_spend_spending_details_spending_details_id");

                    b.HasOne("EFCoreAIGS.Data.Entities.SpendingDetails", "OutcomeSpendingDetails")
                        .WithMany("OutcomeSpend")
                        .HasForeignKey("OutcomeSpendingDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_spend_spending_details_outcome_spending_details_id");

                    b.Navigation("IncomeSpendingDetails");

                    b.Navigation("OutcomeSpendingDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.SpendingDetails", b =>
                {
                    b.HasOne("EFCoreAIGS.Data.Entities.Employee", "Employee")
                        .WithMany("SpendingDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spending_details_employees_employee_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.Employee", b =>
                {
                    b.Navigation("CreditCard");

                    b.Navigation("SpendingDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.Data.Entities.SpendingDetails", b =>
                {
                    b.Navigation("IncomeSpend");

                    b.Navigation("OutcomeSpend");
                });
#pragma warning restore 612, 618
        }
    }
}
