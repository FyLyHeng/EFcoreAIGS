// <auto-generated />
using System;
using System.Collections;
using EFCoreAIGS.EF_ERP;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCoreAIGS.EF_ERP.Migrations
{
    [DbContext(typeof(EF_erpContext))]
    [Migration("20220525022456_initMigration")]
    partial class initMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_name");

                    b.Property<long?>("AccountTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_type_id");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("balance_id");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<float?>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("rate");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ParentId");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountBill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_bill_id");

                    b.Property<DateTime?>("BillDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("bill_date");

                    b.Property<string>("BillRef")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bill_ref");

                    b.Property<int?>("BillStatus")
                        .HasColumnType("integer")
                        .HasColumnName("bill_status");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<long?>("ChartOfAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("chart_of_account_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("due_date");

                    b.Property<long?>("JournalEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("journal_entry_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<double?>("TotalBillAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_bill_amount");

                    b.Property<long?>("TransactionTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_type_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccountBillId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("account_bill", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountBillItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_bill_id");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<long?>("ChartOfAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("chart_of_account_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Ref")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccountBillId");

                    b.HasIndex("ChartOfAccountId");

                    b.ToTable("account_bill_item", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BalanceSideId")
                        .HasColumnType("bigint")
                        .HasColumnName("balance_side_id");

                    b.Property<string>("ClassName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("class_name");

                    b.HasKey("Id");

                    b.HasIndex("BalanceSideId");

                    b.ToTable("account_class", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChartOfAccId")
                        .HasColumnType("bigint")
                        .HasColumnName("chart_of_acc_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("TrxnTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("trxn_type_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccId");

                    b.HasIndex("TrxnTypeId");

                    b.HasIndex(new[] { "Name" }, "uk_2xqbaypwpr0ho131uh6me1st9")
                        .IsUnique();

                    b.ToTable("account_mapping", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountSetupPayable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("GlAccountPayable")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gl_account_payable");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("account_setup_payable", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountSubClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_class_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("SubClassName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sub_class_name");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccountClassId");

                    b.ToTable("account_sub_class", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountType1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_type");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("account_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<long?>("AddressTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_type_id");

                    b.Property<long?>("BillingAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("billing_address_id");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("city_id");

                    b.Property<long?>("CommuneId")
                        .HasColumnType("bigint")
                        .HasColumnName("commune_id");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("district_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("HouseNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("house_no");

                    b.Property<bool?>("IsBillingAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("is_billing_address");

                    b.Property<bool?>("IsDefaultBillingAdd")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default_billing_add");

                    b.Property<bool?>("IsDefaultShippingAdd")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default_shipping_add");

                    b.Property<bool?>("IsShippingAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("is_shipping_address");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("postal_code");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint")
                        .HasColumnName("province_id");

                    b.Property<long?>("ShippingAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("shipping_address_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("StreetNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("street_no");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("VillageId")
                        .HasColumnType("bigint")
                        .HasColumnName("village_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CommuneId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("VillageId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AddressType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("address_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AssetCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("abbr");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("DepreMethod")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("depre_method");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<long>("GlAccuDepreId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_accu_depre_id");

                    b.Property<long>("GlCostId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_cost_id");

                    b.Property<long>("GlDepreExpId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_depre_exp_id");

                    b.Property<double?>("GlDepreRate")
                        .HasColumnType("double precision")
                        .HasColumnName("gl_depre_rate");

                    b.Property<long>("GlGainId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_gain_id");

                    b.Property<long>("GlLossId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_loss_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("GlAccuDepreId");

                    b.HasIndex("GlCostId");

                    b.HasIndex("GlDepreExpId");

                    b.HasIndex("GlGainId");

                    b.HasIndex("GlLossId");

                    b.ToTable("asset_category", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Balance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BalanceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("balance_name");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("balance", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.BalanceSide", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("balance_side", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.BarcodeItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("barcode");

                    b.Property<long>("BarcodeTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("barcode_type_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeTypeId");

                    b.HasIndex("ItemId");

                    b.ToTable("barcode_item", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.BarcodeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BarcodeTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("barcode_type_name");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("barcode_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("abbr");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("branch_code");

                    b.Property<string>("BranchName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("branch_name");

                    b.Property<string>("BranchNameKh")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("branch_name_kh");

                    b.Property<string>("CityProvince")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city_province");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("branch", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ChartOfAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_class_id");

                    b.Property<long?>("AccountSubClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_sub_class_id");

                    b.Property<bool?>("AllowNegative")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_negative");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("GlCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gl_code");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("LeafAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("leaf_account");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccountClassId");

                    b.HasIndex("AccountSubClassId");

                    b.HasIndex("ParentId");

                    b.ToTable("chart_of_account", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ClearBill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BillClearStatus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bill_clear_status");

                    b.Property<string>("BillRef")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bill_ref");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<long?>("ChartOfAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("chart_of_account_id");

                    b.Property<string>("Checks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("checks");

                    b.Property<double?>("ClearAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("clear_amount");

                    b.Property<DateTime?>("ClearDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("clear_date");

                    b.Property<string>("ClearRef")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("clear_ref");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<long?>("JournalEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("journal_entry_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("TransactionTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_type_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("clear_bill", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CoaBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<long?>("ChartOfAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("chart_of_account_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("GlCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gl_code");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("coa_balance", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Commune", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Commid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("commid");

                    b.Property<string>("Commune1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("commune");

                    b.Property<string>("CommuneKh")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("commune_kh");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("district_code");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("commune", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("abbr");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("AddressKh")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_kh");

                    b.Property<string>("CompanyDesc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_desc");

                    b.Property<string>("CompanyLogo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_logo");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyNameKh")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_name_kh");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateOfEstablishment")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_establishment");

                    b.Property<string>("DeductStockSetting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deduct_stock_setting");

                    b.Property<long?>("DomainId")
                        .HasColumnType("bigint")
                        .HasColumnName("domain_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<long?>("FinanceBookId")
                        .HasColumnType("bigint")
                        .HasColumnName("finance_book_id");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("LetterHeadId")
                        .HasColumnType("bigint")
                        .HasColumnName("letter_head_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("TaxId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tax_id");

                    b.Property<long?>("TermConditionId")
                        .HasColumnType("bigint")
                        .HasColumnName("term_condition_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("VatIn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vat_in");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DomainId");

                    b.HasIndex("FinanceBookId");

                    b.HasIndex("LetterHeadId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TermConditionId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("gender_id");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mobile_no");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<long?>("SalutationId")
                        .HasColumnType("bigint")
                        .HasColumnName("salutation_id");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_address");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("supplier_address");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("SalutationId");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country_name");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CreditNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<double?>("CreditNoteAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("credit_note_amount");

                    b.Property<string>("CustomStatus")
                        .HasColumnType("text")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("InvoiceAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("invoice_amount");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<bool?>("IsIncludeVat")
                        .HasColumnType("boolean")
                        .HasColumnName("is_include_vat");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex(new[] { "Series" }, "idx1i51elups6i8kk8ht3kgyr5cb");

                    b.ToTable("credit_note", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Currency1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("currency");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("currency_code");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<int?>("CreditLength")
                        .HasColumnType("integer")
                        .HasColumnName("credit_length");

                    b.Property<double?>("CreditLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("credit_limit");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long>("CustomerGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_group_id");

                    b.Property<int?>("CustomerType")
                        .HasColumnType("integer")
                        .HasColumnName("customer_type");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean")
                        .HasColumnName("disable");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("gender_id");

                    b.Property<string>("IdCard")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("id_card");

                    b.Property<bool?>("IsInternalCustomer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_internal_customer");

                    b.Property<bool?>("IsPassCreditLimit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pass_credit_limit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameKh")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_kh");

                    b.Property<string>("PaymentTerm")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_term");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<long?>("SalePersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_person_id");

                    b.Property<long?>("SalutationId")
                        .HasColumnType("bigint")
                        .HasColumnName("salutation_id");

                    b.Property<string>("Series")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("TaxId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tax_id");

                    b.Property<long?>("TerritoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("territory_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("VatIn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vat_in");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerGroupId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("SalePersonId");

                    b.HasIndex("SalutationId");

                    b.HasIndex("TerritoryId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double>("TotalAmountar")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amountar");

                    b.Property<double>("TotalBalancear")
                        .HasColumnType("double precision")
                        .HasColumnName("total_balancear");

                    b.Property<double>("TotalPrepayment")
                        .HasColumnType("double precision")
                        .HasColumnName("total_prepayment");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("customer_balance", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<double?>("CreditLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("credit_limit");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("group_name");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("TermConditionId")
                        .HasColumnType("bigint")
                        .HasColumnName("term_condition_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("TermConditionId");

                    b.ToTable("customer_group", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPaymentEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("GlAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_account_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PayBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pay_by");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("RefNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref_no");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<double?>("TotalPrepayment")
                        .HasColumnType("double precision")
                        .HasColumnName("total_prepayment");

                    b.Property<double?>("TotalReceive")
                        .HasColumnType("double precision")
                        .HasColumnName("total_receive");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GlAccountId");

                    b.ToTable("customer_payment_entry", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPaymentEntryReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AmountToReceive")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_to_receive");

                    b.Property<double?>("ApplyPrepayment")
                        .HasColumnType("double precision")
                        .HasColumnName("apply_prepayment");

                    b.Property<double?>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerPaymentEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_payment_entry_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("Invamount")
                        .HasColumnType("double precision")
                        .HasColumnName("invamount");

                    b.Property<int?>("Invid")
                        .HasColumnType("integer")
                        .HasColumnName("invid");

                    b.Property<double?>("Invoutstanding")
                        .HasColumnType("double precision")
                        .HasColumnName("invoutstanding");

                    b.Property<string>("Invseries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("invseries");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("Soid")
                        .HasColumnType("integer")
                        .HasColumnName("soid");

                    b.Property<string>("Soseries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("soseries");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPaymentEntryId");

                    b.ToTable("customer_payment_entry_reference", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPrePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("GlAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_account_id");

                    b.Property<bool?>("IsByso")
                        .HasColumnType("boolean")
                        .HasColumnName("is_byso");

                    b.Property<double?>("LastPrepaymentBalance")
                        .HasColumnType("double precision")
                        .HasColumnName("last_prepayment_balance");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PayBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pay_by");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentOption")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_option");

                    b.Property<string>("RefNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref_no");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GlAccountId");

                    b.ToTable("customer_pre_payment", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPrePaymentReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerPrePaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_pre_payment_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_order_id");

                    b.Property<long?>("Soid")
                        .HasColumnType("bigint")
                        .HasColumnName("soid");

                    b.Property<double?>("SooutstandingAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("sooutstanding_amount");

                    b.Property<double?>("SoprepaymentAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("soprepayment_amount");

                    b.Property<string>("Soseries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("soseries");

                    b.Property<double?>("SototalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("sototal_amount");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPrePaymentId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("customer_pre_payment_reference", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DataSourceConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<BitArray>("IsActive")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("data_source_config", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DebitNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percentage");

                    b.Property<double?>("GrandTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("grand_total");

                    b.Property<bool?>("IsIncludeVat")
                        .HasColumnType("boolean")
                        .HasColumnName("is_include_vat");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PurchaseReturnId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_return_id");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("SubTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("sub_total");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<double?>("VatAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("vat_amount");

                    b.Property<double?>("VatPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("vat_percentage");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseReturnId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "Series" }, "idxl8yek74ethrix13a64pt5y7tt");

                    b.ToTable("debit_note", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DeliveryNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AdditionalDisAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("additional_dis_amount");

                    b.Property<float?>("AdditionalDisPer")
                        .HasColumnType("real")
                        .HasColumnName("additional_dis_per");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("billing_address");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("billing_address_id");

                    b.Property<string>("BillingTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("billing_title");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_done");

                    b.Property<long?>("DeliveryTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_type_id");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("driver_id");

                    b.Property<double?>("GrandTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("grand_total");

                    b.Property<bool?>("ImmediateTransfer")
                        .HasColumnType("boolean")
                        .HasColumnName("immediate_transfer");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_order_id");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("shipping_address");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("shipping_address_id");

                    b.Property<string>("ShippingTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_title");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<int?>("TotalQty")
                        .HasColumnType("integer")
                        .HasColumnName("total_qty");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<double?>("VatAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("vat_amount");

                    b.Property<float?>("VatPer")
                        .HasColumnType("real")
                        .HasColumnName("vat_per");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("WarehouseAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("warehouse_address");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("DriverId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idxeu5ex12ndxk13mda3sq5dfe34");

                    b.ToTable("delivery_note", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DeliveryNoteDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<float?>("ConversionFactor")
                        .HasColumnType("real")
                        .HasColumnName("conversion_factor");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("DeliveryNoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_note_id");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<float?>("DiscountPercent")
                        .HasColumnType("real")
                        .HasColumnName("discount_percent");

                    b.Property<bool>("HasSerialNo")
                        .HasColumnType("boolean")
                        .HasColumnName("has_serial_no");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float?>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<string>("SerialNo")
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<float?>("StockQty")
                        .HasColumnType("real")
                        .HasColumnName("stock_qty");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryNoteId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.ToTable("delivery_note_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DeliveryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("delivery_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Distid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("distid");

                    b.Property<string>("District1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("district");

                    b.Property<string>("DistrictKh")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("district_kh");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("province_code");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint")
                        .HasColumnName("province_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("district", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DocumentSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDifferentPrefix")
                        .HasColumnType("boolean")
                        .HasColumnName("is_different_prefix");

                    b.Property<bool?>("IsDifferentSequence")
                        .HasColumnType("boolean")
                        .HasColumnName("is_different_sequence");

                    b.Property<int?>("LastCode")
                        .HasColumnType("integer")
                        .HasColumnName("last_code");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("NonVatLastCode")
                        .HasColumnType("integer")
                        .HasColumnName("non_vat_last_code");

                    b.Property<string>("NonVatPrefix")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("non_vat_prefix");

                    b.Property<string>("NonVatSuffix")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("non_vat_suffix");

                    b.Property<string>("Prefix")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("prefix");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Suffix")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("suffix");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "idx8vql0es88p6virsa77nqnot1y");

                    b.HasIndex(new[] { "NonVatPrefix" }, "uk_34ksnj6rogabks5ux36aexjfv")
                        .IsUnique();

                    b.HasIndex(new[] { "Prefix" }, "uk_59vl05p8a1g8vknuiv7jobj8c")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "uk_8vql0es88p6virsa77nqnot1y")
                        .IsUnique();

                    b.ToTable("document_setting", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Domain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Domain1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("domain");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("domain", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CellphoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cellphone_number");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("DriverName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("driver_name");

                    b.Property<long?>("DriverStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("driver_status_id");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiry_date");

                    b.Property<DateTime?>("IssuingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("issuing_date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("license_number");

                    b.Property<string>("Series")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("DriverStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex(new[] { "Series" }, "idxm51sy2i8dqhonkl6sixli37he");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DriverStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("driver_status", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DataOfJoining")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_of_joining");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<long?>("EmployeeTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_type_id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("first_name");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("gender_id");

                    b.Property<long?>("HealthInsuranceId")
                        .HasColumnType("bigint")
                        .HasColumnName("health_insurance_id");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<long?>("SalutationId")
                        .HasColumnType("bigint")
                        .HasColumnName("salutation_id");

                    b.Property<string>("Series")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("HealthInsuranceId");

                    b.HasIndex("SalutationId");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.EmployeeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("EmployeeType1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("employee_type");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("employee_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ExpanseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("expanse_category", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Feature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("feature_name");

                    b.Property<int>("FeatureOrder")
                        .HasColumnType("integer")
                        .HasColumnName("feature_order");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("feature", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.FinanceBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("finance_book", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Gender1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("gender", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Glentry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChartOfAccId")
                        .HasColumnType("bigint")
                        .HasColumnName("chart_of_acc_id");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<double?>("Credit")
                        .HasColumnType("double precision")
                        .HasColumnName("credit");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("Debit")
                        .HasColumnType("double precision")
                        .HasColumnName("debit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<DateTime?>("PostingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posting_date");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("VoucherNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("voucher_no");

                    b.Property<string>("VoucherType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("voucher_type");

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "PostingDate" }, "idx1drhu9i7fqp05eg7bh43lndep");

                    b.HasIndex(new[] { "VoucherNo" }, "idxpvlt0snlbaku13ra2tt5i256y");

                    b.ToTable("glentry", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.GlobalSearch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("doc_type");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Routing")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("routing");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "idxr8y2erlq5c9s7pkspmg3ebpdc");

                    b.ToTable("global_search", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.HealthInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("HealthInsuranceName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("health_insurance_name");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("health_insurance", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Holiday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("HolidayDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("holiday_date");

                    b.Property<string>("HolidayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("holiday_name");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("holiday", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AdditionalDisAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("additional_dis_amount");

                    b.Property<float?>("AdditionalDisPer")
                        .HasColumnType("real")
                        .HasColumnName("additional_dis_per");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("DeliveryNoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_note_id");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("due_date");

                    b.Property<float?>("GrandTotal")
                        .HasColumnType("real")
                        .HasColumnName("grand_total");

                    b.Property<double?>("InvoiceAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("invoice_amount");

                    b.Property<float?>("InvoicePer")
                        .HasColumnType("real")
                        .HasColumnName("invoice_per");

                    b.Property<bool?>("IsIncludeVat")
                        .HasColumnType("boolean")
                        .HasColumnName("is_include_vat");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_order_id");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_address");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<double?>("TotalCost")
                        .HasColumnType("double precision")
                        .HasColumnName("total_cost");

                    b.Property<float?>("TotalQty")
                        .HasColumnType("real")
                        .HasColumnName("total_qty");

                    b.Property<float?>("UnpaidAmount")
                        .HasColumnType("real")
                        .HasColumnName("unpaid_amount");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<double?>("VatAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("vat_amount");

                    b.Property<float?>("VatPer")
                        .HasColumnType("real")
                        .HasColumnName("vat_per");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("WarehouseAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("warehouse_address");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryNoteId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idxc3ftrohmw09g5yfr4liliy02v");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<float?>("ConversionFactor")
                        .HasColumnType("real")
                        .HasColumnName("conversion_factor");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<float?>("DiscountPercent")
                        .HasColumnType("real")
                        .HasColumnName("discount_percent");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom__id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<long?>("SaleInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_invoice_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("SaleInvoiceId");

                    b.ToTable("invoice_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DeliveryFee")
                        .HasColumnType("double precision")
                        .HasColumnName("delivery_fee");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndOfLife")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_of_life");

                    b.Property<bool?>("HasBatchNo")
                        .HasColumnType("boolean")
                        .HasColumnName("has_batch_no");

                    b.Property<bool?>("HasSerialNo")
                        .HasColumnType("boolean")
                        .HasColumnName("has_serial_no");

                    b.Property<bool?>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<bool?>("IsFixAsset")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fix_asset");

                    b.Property<bool?>("IsMaintainStock")
                        .HasColumnType("boolean")
                        .HasColumnName("is_maintain_stock");

                    b.Property<bool?>("IsSaleItem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sale_item");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<long?>("ItemBrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_brand_id");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_code");

                    b.Property<long?>("ItemGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_group_id");

                    b.Property<string>("ItemImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_image_url");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_name");

                    b.Property<double?>("LastPurchaseRate")
                        .HasColumnType("double precision")
                        .HasColumnName("last_purchase_rate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("ManufacturePartNumber")
                        .HasColumnType("integer")
                        .HasColumnName("manufacture_part_number");

                    b.Property<double?>("MaxDiscount")
                        .HasColumnType("double precision")
                        .HasColumnName("max_discount");

                    b.Property<int>("OpeningStock")
                        .HasColumnType("integer")
                        .HasColumnName("opening_stock");

                    b.Property<int?>("SaleUnitOfMeasure")
                        .HasColumnType("integer")
                        .HasColumnName("sale_unit_of_measure");

                    b.Property<long?>("SelfLifeInDay")
                        .HasColumnType("bigint")
                        .HasColumnName("self_life_in_day");

                    b.Property<double>("StandardBuyingRate")
                        .HasColumnType("double precision")
                        .HasColumnName("standard_buying_rate");

                    b.Property<double>("StandardSellingRate")
                        .HasColumnType("double precision")
                        .HasColumnName("standard_selling_rate");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long>("UomId")
                        .HasColumnType("bigint")
                        .HasColumnName("uom_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<long>("ValuationMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("valuation_method_id");

                    b.Property<double?>("ValuationRate")
                        .HasColumnType("double precision")
                        .HasColumnName("valuation_rate");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarrantyPeriod")
                        .HasColumnType("bigint")
                        .HasColumnName("warranty_period");

                    b.Property<double?>("WeightPerUnit")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_per_unit");

                    b.Property<string>("WeightUom")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("weight_uom");

                    b.Property<long?>("WeightUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("weight_uom_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemBrandId");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("UomId");

                    b.HasIndex("ValuationMethodId");

                    b.HasIndex(new[] { "ItemCode" }, "idx4xwxmd7c5scggdhewiue7fopp");

                    b.HasIndex(new[] { "ItemName" }, "idxmqo9xeh2a6fvb17cqpmo1q72n");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AttributeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attribute_name");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("item_attribute", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemAttributeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("AttributeValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("attribute_value");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("ItemAttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_attribute_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemAttributeId");

                    b.ToTable("item_attribute_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("ItemAttributeDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_attribute_detail_id");

                    b.Property<long>("ItemAttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_attribute_id");

                    b.Property<long?>("ItemItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemAttributeDetailId");

                    b.HasIndex("ItemAttributeId");

                    b.HasIndex("ItemItemId");

                    b.ToTable("item_attribute_value", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("brand_name");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("item_brand", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("group_name");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("item_group", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<string>("ItemImageName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_image_name");

                    b.Property<string>("ItemImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_image_path");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("item_image", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("EndOfLife")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_of_life");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("MaterialRequestTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("material_request_type_id");

                    b.Property<long?>("SelfLifeInDay")
                        .HasColumnType("bigint")
                        .HasColumnName("self_life_in_day");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint")
                        .HasColumnName("uom_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<long?>("ValuationMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("valuation_method_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarrantyPeriod")
                        .HasColumnType("bigint")
                        .HasColumnName("warranty_period");

                    b.Property<double?>("WeightPerUnit")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_per_unit");

                    b.Property<string>("WeightUom")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("weight_uom");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MaterialRequestTypeId");

                    b.HasIndex("UomId");

                    b.HasIndex("ValuationMethodId");

                    b.ToTable("item_inventory", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("ExtraCost")
                        .HasColumnType("double precision")
                        .HasColumnName("extra_cost");

                    b.Property<double?>("ExtraPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("extra_price");

                    b.Property<double?>("ExtraPriceList")
                        .HasColumnType("double precision")
                        .HasColumnName("extra_price_list");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<int?>("ItemQtyForecast")
                        .HasColumnType("integer")
                        .HasColumnName("item_qty_forecast");

                    b.Property<int?>("ItemQtyOnHand")
                        .HasColumnType("integer")
                        .HasColumnName("item_qty_on_hand");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("item_items", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsBuying")
                        .HasColumnType("boolean")
                        .HasColumnName("is_buying");

                    b.Property<bool?>("IsSelling")
                        .HasColumnType("boolean")
                        .HasColumnName("is_selling");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("MinimumQty")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_qty");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<double?>("StandardBuying")
                        .HasColumnType("double precision")
                        .HasColumnName("standard_buying");

                    b.Property<double?>("StandardSelling")
                        .HasColumnType("double precision")
                        .HasColumnName("standard_selling");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PriceListId");

                    b.ToTable("item_price", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("TaxRate")
                        .HasColumnType("double precision")
                        .HasColumnName("tax_rate");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemId");

                    b.ToTable("item_tax", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemVarrantUom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("ConversionFactor")
                        .HasColumnType("real")
                        .HasColumnName("conversion_factor");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint")
                        .HasColumnName("uom_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UomId");

                    b.ToTable("item_varrant_uom", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemWarehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("item_warehouse", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.JournalEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Adjusting")
                        .HasColumnType("boolean")
                        .HasColumnName("adjusting");

                    b.Property<int?>("BStatus")
                        .HasColumnType("integer")
                        .HasColumnName("b_status");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<bool?>("CanReverse")
                        .HasColumnType("boolean")
                        .HasColumnName("can_reverse");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("EntryNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("entry_no");

                    b.Property<DateTime?>("JournalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("journal_date");

                    b.Property<int?>("JournalType")
                        .HasColumnType("integer")
                        .HasColumnName("journal_type");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("TotalCredit")
                        .HasColumnType("double precision")
                        .HasColumnName("total_credit");

                    b.Property<double?>("TotalDebit")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debit");

                    b.Property<long?>("TrxnTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("trxn_type_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TrxnTypeId");

                    b.ToTable("journal_entry", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.LetterHead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("LetterHeadName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("letter_head_name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("letter_head", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.MaterialRequestType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type_name");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("material_request_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Closable")
                        .HasColumnType("boolean")
                        .HasColumnName("closable");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_link");

                    b.Property<string>("IconBg")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon_bg");

                    b.Property<string>("IconClass")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon_class");

                    b.Property<string>("IconColor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon_color");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<bool>("IsGroupTitle")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group_title");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("MenuOrder")
                        .HasColumnType("integer")
                        .HasColumnName("menu_order");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Routing")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("routing");

                    b.Property<bool?>("Selected")
                        .HasColumnType("boolean")
                        .HasColumnName("selected");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("menu_item", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Miscellaneou", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("miscellaneous", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Method")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("method");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("payment_method", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("FeatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("feature_id");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("function_name");

                    b.Property<int>("FunctionOrder")
                        .HasColumnType("integer")
                        .HasColumnName("function_order");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FeatureId" }, "uk_m63q3sk9p3gt4wteto2ckc5sg")
                        .IsUnique();

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PriceList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("Enable")
                        .HasColumnType("boolean")
                        .HasColumnName("enable");

                    b.Property<bool?>("IsBuying")
                        .HasColumnType("boolean")
                        .HasColumnName("is_buying");

                    b.Property<bool?>("IsSelling")
                        .HasColumnType("boolean")
                        .HasColumnName("is_selling");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PriceListName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("price_list_name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("price_list", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Provid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("provid");

                    b.Property<string>("Province1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("province");

                    b.Property<string>("ProvinceKh")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("province_kh");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("province", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseHoldInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("release_date");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("purchase_hold_invoice", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_done");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("grand_total");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsRawMaterial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_raw_material");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("boolean")
                        .HasColumnName("is_return");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Noted")
                        .HasColumnType("text")
                        .HasColumnName("noted");

                    b.Property<double>("OutstandingAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("outstanding_amount");

                    b.Property<double>("PrepaidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("prepaid_amount");

                    b.Property<double>("PrepaymentAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("prepayment_amount");

                    b.Property<DateTime?>("PurchaseOrderDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("purchase_order_date");

                    b.Property<long?>("PurchaseOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_order_id");

                    b.Property<string>("PurchaseOrderSeries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purchase_order_series");

                    b.Property<long?>("PurchaseReceiptId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_receipt_id");

                    b.Property<string>("PurchaseReceiptSeries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purchase_receipt_series");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("supplier_address");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("supplier_name");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<double>("TotalQty")
                        .HasColumnType("double precision")
                        .HasColumnName("total_qty");

                    b.Property<double?>("TotalWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("total_weight");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseReceiptId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idx7wn0qc6932b6uhmf1ke9iw635");

                    b.ToTable("purchase_invoice", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseInvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("ActualQty")
                        .HasColumnType("double precision")
                        .HasColumnName("actual_qty");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<float?>("ConversionFactor")
                        .HasColumnType("real")
                        .HasColumnName("conversion_factor");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_name");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom__id");

                    b.Property<double?>("LastPurchaseRate")
                        .HasColumnType("double precision")
                        .HasColumnName("last_purchase_rate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PurchaseInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_invoice_id");

                    b.Property<float?>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<float?>("ReceivedQty")
                        .HasColumnType("real")
                        .HasColumnName("received_qty");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("StockQty")
                        .HasColumnType("double precision")
                        .HasColumnName("stock_qty");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<double?>("WeightUom")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_uom");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("purchase_invoice_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseInvoicePurchaseInvoiceDetail", b =>
                {
                    b.Property<long>("PurchaseInvoiceDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_invoice_detail_id");

                    b.Property<long>("PurchaseInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_invoice_id");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex(new[] { "PurchaseInvoiceDetailId" }, "uk_523pbs526qoeltrrbiqqmm2m3")
                        .IsUnique();

                    b.ToTable("purchase_invoice_purchase_invoice_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsPurchaseItem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_purchase_item");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("LeadTimeInDay")
                        .HasColumnType("integer")
                        .HasColumnName("lead_time_in_day");

                    b.Property<int?>("MinimumOrderQty")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_order_qty");

                    b.Property<int?>("SafetyStock")
                        .HasColumnType("integer")
                        .HasColumnName("safety_stock");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint")
                        .HasColumnName("uom_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UomId");

                    b.ToTable("purchase_item", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("contact_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("grand_total");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<double>("OutstandingAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("outstanding_amount");

                    b.Property<double>("PrePaidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("pre_paid_amount");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("required_date");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<double?>("TotalCharge")
                        .HasColumnType("double precision")
                        .HasColumnName("total_charge");

                    b.Property<double>("TotalPrepayment")
                        .HasColumnType("double precision")
                        .HasColumnName("total_prepayment");

                    b.Property<double?>("TotalQty")
                        .HasColumnType("double precision")
                        .HasColumnName("total_qty");

                    b.Property<double?>("TotalWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("total_weight");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idx5ny4s4qvd5lg0q2fydgxcv6ow");

                    b.ToTable("purchase_order", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("ActualQty")
                        .HasColumnType("double precision")
                        .HasColumnName("actual_qty");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<float?>("ConversionFactor")
                        .HasColumnType("real")
                        .HasColumnName("conversion_factor");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom__id");

                    b.Property<double?>("LastPurchaseRate")
                        .HasColumnType("double precision")
                        .HasColumnName("last_purchase_rate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PurchaseOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_order_id");

                    b.Property<float>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<double>("ReceivedQty")
                        .HasColumnType("double precision")
                        .HasColumnName("received_qty");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("required_date");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double>("StockQty")
                        .HasColumnType("double precision")
                        .HasColumnName("stock_qty");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<double>("WeightUom")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_uom");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("purchase_order_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReceipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("contact_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_done");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("grand_total");

                    b.Property<bool?>("IsReturn")
                        .HasColumnType("boolean")
                        .HasColumnName("is_return");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Noted")
                        .HasColumnType("text")
                        .HasColumnName("noted");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<string>("ProrateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("prorate_by");

                    b.Property<long?>("ProrateById")
                        .HasColumnType("bigint")
                        .HasColumnName("prorate_by_id");

                    b.Property<DateTime?>("PurchaseOrderDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("purchase_order_date");

                    b.Property<long?>("PurchaseOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_order_id");

                    b.Property<string>("PurchaseOrderSeries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purchase_order_series");

                    b.Property<bool?>("RawMaterial")
                        .HasColumnType("boolean")
                        .HasColumnName("raw_material");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("required_date");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_address");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("supplier_address");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<double>("TotalAdditionalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_additional_amount");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<double?>("TotalCharge")
                        .HasColumnType("double precision")
                        .HasColumnName("total_charge");

                    b.Property<double?>("TotalQty")
                        .HasColumnType("double precision")
                        .HasColumnName("total_qty");

                    b.Property<double?>("TotalWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("total_weight");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idx23c88ptlr39apyxyx6p6w4u6m");

                    b.ToTable("purchase_receipt", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReceiptDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("ActualQty")
                        .HasColumnType("double precision")
                        .HasColumnName("actual_qty");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("BatchNo")
                        .HasColumnType("text")
                        .HasColumnName("batch_no");

                    b.Property<float?>("ConversionFactor")
                        .HasColumnType("real")
                        .HasColumnName("conversion_factor");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_name");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom__id");

                    b.Property<double?>("LastPurchaseRate")
                        .HasColumnType("double precision")
                        .HasColumnName("last_purchase_rate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PurchaseReceiptId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_receipt_id");

                    b.Property<float>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<float?>("ReceivedQty")
                        .HasColumnType("real")
                        .HasColumnName("received_qty");

                    b.Property<string>("SerialNo")
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("StockQty")
                        .HasColumnType("double precision")
                        .HasColumnName("stock_qty");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<float?>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.Property<string>("WeightUom")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("weight_uom");

                    b.Property<long?>("WeightUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("weight_uom_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("PurchaseReceiptId");

                    b.ToTable("purchase_receipt_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReceiptExpanse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("ExpanseCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("expanse_category_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PurchaseReceiptId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_receipt_id");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ExpanseCategoryId");

                    b.HasIndex("PurchaseReceiptId");

                    b.HasIndex("SupplierId");

                    b.ToTable("purchase_receipt_expanse", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseRefund", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DebitNoteAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("debit_note_amount");

                    b.Property<long?>("DebitNoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("debit_note_id");

                    b.Property<long?>("GlAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_account_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PaymentOption")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_option");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_no");

                    b.Property<double?>("RefundAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("refund_amount");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("DebitNoteId");

                    b.HasIndex("GlAccountId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "Series" }, "idxfabjy9hw2uq2hsh64icyg45dp");

                    b.ToTable("purchase_refund", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("SubTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("sub_total");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<double?>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<double?>("VatAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("vat_amount");

                    b.Property<double?>("VatPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("vat_percent");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idxgfj7vg4hkcyfrnhkk8reeei7p");

                    b.ToTable("purchase_return", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReturnDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<float?>("DiscountPercent")
                        .HasColumnType("real")
                        .HasColumnName("discount_percent");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("PurchaseReturnId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_return_id");

                    b.Property<float?>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("purchase_return_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Quotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("AdditionalDisAmount")
                        .HasColumnType("real")
                        .HasColumnName("additional_dis_amount");

                    b.Property<float?>("AdditionalDisPer")
                        .HasColumnType("real")
                        .HasColumnName("additional_dis_per");

                    b.Property<string>("AdditionalNote")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("additional_note");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("billing_address");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("billing_address_id");

                    b.Property<string>("BillingTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("billing_title");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<int?>("CusPurchaseOrder")
                        .HasColumnType("integer")
                        .HasColumnName("cus_purchase_order");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("EstimateDeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("estimate_delivery_date");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expired_date");

                    b.Property<float?>("GrandTotal")
                        .HasColumnType("real")
                        .HasColumnName("grand_total");

                    b.Property<bool?>("IsIncludeVat")
                        .HasColumnType("boolean")
                        .HasColumnName("is_include_vat");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("post_date");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_order_id");

                    b.Property<long?>("SalePersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_person_id");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_address");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("shipping_address_id");

                    b.Property<string>("ShippingTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_title");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("TermConditionId")
                        .HasColumnType("bigint")
                        .HasColumnName("term_condition_id");

                    b.Property<double?>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<float?>("TotalCost")
                        .HasColumnType("real")
                        .HasColumnName("total_cost");

                    b.Property<int?>("TotalQty")
                        .HasColumnType("integer")
                        .HasColumnName("total_qty");

                    b.Property<float?>("TotalTaxCharge")
                        .HasColumnType("real")
                        .HasColumnName("total_tax_charge");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<float?>("VatAmount")
                        .HasColumnType("real")
                        .HasColumnName("vat_amount");

                    b.Property<float?>("VatPer")
                        .HasColumnType("real")
                        .HasColumnName("vat_per");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("SalePersonId");

                    b.HasIndex("TermConditionId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idxg7n3afp81sr8t1hxo2meu3aj1");

                    b.ToTable("quotation", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.QuotationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<double?>("ConversionFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("conversion_factor");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<double?>("DeliveryFee")
                        .HasColumnType("double precision")
                        .HasColumnName("delivery_fee");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<float?>("DiscountPercent")
                        .HasColumnType("real")
                        .HasColumnName("discount_percent");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float?>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<long?>("QuotationId")
                        .HasColumnType("bigint")
                        .HasColumnName("quotation_id");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("StockQty")
                        .HasColumnType("double precision")
                        .HasColumnName("stock_qty");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("QuotationId");

                    b.ToTable("quotation_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Refund", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CreditNoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("credit_note_id");

                    b.Property<double?>("CreditNotedAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("credit_noted_amount");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("GlAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_account_id");

                    b.Property<double?>("InvoiceAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("invoice_amount");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("invoice_no");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PaymentOption")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_option");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_no");

                    b.Property<double?>("RefundAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("refund_amount");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GlAccountId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex(new[] { "Series" }, "idxiaf0hxc896ewo9xorfwsfhaij");

                    b.ToTable("refund", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role_name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleName" }, "uk_iubw515ff0ugtm28p8g3myt0h")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.RoleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("menu_item_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_menu", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("AdditionalDisAmount")
                        .HasColumnType("real")
                        .HasColumnName("additional_dis_amount");

                    b.Property<float?>("AdditionalDisPer")
                        .HasColumnType("real")
                        .HasColumnName("additional_dis_per");

                    b.Property<string>("AdditionalNote")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("additional_note");

                    b.Property<string>("BilledStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("billed_status");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("billing_address");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("billing_address_id");

                    b.Property<string>("BillingTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("billing_title");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<int?>("CusPurchaseOrder")
                        .HasColumnType("integer")
                        .HasColumnName("cus_purchase_order");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("delivery_status");

                    b.Property<DateTime?>("EstimateDeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("estimate_delivery_date");

                    b.Property<string>("FirstProcessFlow")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_process_flow");

                    b.Property<float?>("GrandTotal")
                        .HasColumnType("real")
                        .HasColumnName("grand_total");

                    b.Property<bool?>("IsDeposit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deposit");

                    b.Property<bool?>("IsIncludeVat")
                        .HasColumnType("boolean")
                        .HasColumnName("is_include_vat");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float?>("PerBilled")
                        .HasColumnType("real")
                        .HasColumnName("per_billed");

                    b.Property<float?>("PerDelivered")
                        .HasColumnType("real")
                        .HasColumnName("per_delivered");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("post_date");

                    b.Property<double?>("PrepaymentAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("prepayment_amount");

                    b.Property<double?>("PrepaymentBalance")
                        .HasColumnType("double precision")
                        .HasColumnName("prepayment_balance");

                    b.Property<long?>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<long?>("QuotationId")
                        .HasColumnType("bigint")
                        .HasColumnName("quotation_id");

                    b.Property<long?>("SalePersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_person_id");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("shipping_address");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("shipping_address_id");

                    b.Property<string>("ShippingTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_title");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<double?>("TotalCost")
                        .HasColumnType("double precision")
                        .HasColumnName("total_cost");

                    b.Property<int?>("TotalQty")
                        .HasColumnType("integer")
                        .HasColumnName("total_qty");

                    b.Property<float?>("TotalTaxCharge")
                        .HasColumnType("real")
                        .HasColumnName("total_tax_charge");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<double?>("VatAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("vat_amount");

                    b.Property<float?>("VatPer")
                        .HasColumnType("real")
                        .HasColumnName("vat_per");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SalePersonId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idxqbmft4q1dmjlerprud17m172k");

                    b.ToTable("sale_order", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<float?>("ConversionFactor")
                        .HasColumnType("real")
                        .HasColumnName("conversion_factor");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<float?>("DeliveryQty")
                        .HasColumnType("real")
                        .HasColumnName("delivery_qty");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<float?>("DiscountPercent")
                        .HasColumnType("real")
                        .HasColumnName("discount_percent");

                    b.Property<bool?>("HasSerialNo")
                        .HasColumnType("boolean")
                        .HasColumnName("has_serial_no");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<float?>("RemainQty")
                        .HasColumnType("real")
                        .HasColumnName("remain_qty");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_order_id");

                    b.Property<string>("SerialNo")
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<float?>("StockQty")
                        .HasColumnType("real")
                        .HasColumnName("stock_qty");

                    b.Property<double?>("TotalCost")
                        .HasColumnType("double precision")
                        .HasColumnName("total_cost");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<double?>("ValuationRate")
                        .HasColumnType("double precision")
                        .HasColumnName("valuation_rate");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("sale_order_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SalePerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("CommissionRate")
                        .HasColumnType("real")
                        .HasColumnName("commission_rate");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("SalePersonName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sale_person_name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ParentId");

                    b.ToTable("sale_person", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("DeliveryNoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_note_id");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<double?>("GrandTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("grand_total");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("remark");

                    b.Property<string>("ReturnFrom")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("return_from");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_order_id");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<double?>("TotalQty")
                        .HasColumnType("double precision")
                        .HasColumnName("total_qty");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryNoteId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Series" }, "idxix1ctilkl2tb93ca3mjm8ucyj");

                    b.ToTable("sale_return", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleReturnDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<float?>("DiscountPercentage")
                        .HasColumnType("real")
                        .HasColumnName("discount_percentage");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ItemVariantUomId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_variant_uom__id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float?>("Qty")
                        .HasColumnType("real")
                        .HasColumnName("qty");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<long?>("SaleReturnId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_return_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemVariantUomId");

                    b.HasIndex("SaleReturnId");

                    b.ToTable("sale_return_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleTaxCharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("Disable")
                        .HasColumnType("boolean")
                        .HasColumnName("disable");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("sale_tax_charge", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleTaxDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<float?>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float?>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("rate");

                    b.Property<long?>("SaleTaxChargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_tax_charge_id");

                    b.Property<long?>("SaleTaxTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_tax_type_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<float?>("Total")
                        .HasColumnType("real")
                        .HasColumnName("total");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SaleTaxChargeId");

                    b.HasIndex("SaleTaxTypeId");

                    b.ToTable("sale_tax_detail", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleTaxType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("sale_tax_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Salutation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("gender_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Salutation1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("salutation");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("salutation", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SerialNo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Asset")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("asset");

                    b.Property<string>("AssetStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("asset_status");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("batch_no");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DeliverySeries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("delivery_series");

                    b.Property<string>("Employee")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("employee");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("MaintenanceStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("maintenance_status");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("purchase_date");

                    b.Property<string>("PurchaseSeries")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purchase_series");

                    b.Property<string>("SerialNo1")
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<string>("SerialNoDetail")
                        .HasColumnType("text")
                        .HasColumnName("serial_no_detail");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.Property<DateTime?>("WarrantyExpireDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("warranty_expire_date");

                    b.Property<float?>("WarrantyPeriod")
                        .HasColumnType("real")
                        .HasColumnName("warranty_period");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("serial_no", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.StockBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("BalanceQty")
                        .HasColumnType("real")
                        .HasColumnName("balance_qty");

                    b.Property<double>("BalanceValue")
                        .HasColumnType("double precision")
                        .HasColumnName("balance_value");

                    b.Property<double>("Cogs")
                        .HasColumnType("double precision")
                        .HasColumnName("cogs");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<float>("InQty")
                        .HasColumnType("real")
                        .HasColumnName("in_qty");

                    b.Property<double>("InValue")
                        .HasColumnType("double precision")
                        .HasColumnName("in_value");

                    b.Property<bool?>("IsAbsoluteValue")
                        .HasColumnType("boolean")
                        .HasColumnName("is_absolute_value");

                    b.Property<long?>("ItemBrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_brand_id");

                    b.Property<long?>("ItemGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_group_id");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float>("OutQty")
                        .HasColumnType("real")
                        .HasColumnName("out_qty");

                    b.Property<float>("OutValue")
                        .HasColumnType("real")
                        .HasColumnName("out_value");

                    b.Property<float>("ReservedQty")
                        .HasColumnType("real")
                        .HasColumnName("reserved_qty");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint")
                        .HasColumnName("uom_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<double>("ValuationRate")
                        .HasColumnType("double precision")
                        .HasColumnName("valuation_rate");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<float>("WaitingQty")
                        .HasColumnType("real")
                        .HasColumnName("waiting_qty");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemBrandId");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UomId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("stock_balance", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.StockLedgerEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("ActualQty")
                        .HasColumnType("real")
                        .HasColumnName("actual_qty");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<float?>("QtyAfterTranx")
                        .HasColumnType("real")
                        .HasColumnName("qty_after_tranx");

                    b.Property<string>("SerialNo")
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint")
                        .HasColumnName("uom_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<float?>("ValuationRate")
                        .HasColumnType("real")
                        .HasColumnName("valuation_rate");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("VoucherNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("voucher_no");

                    b.Property<string>("VoucherType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("voucher_type");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UomId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("stock_ledger_entry", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.StockMove", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsRefund")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refund");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<float?>("ItemQty")
                        .HasColumnType("real")
                        .HasColumnName("item_qty");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<int?>("StateStockMove")
                        .HasColumnType("integer")
                        .HasColumnName("state_stock_move");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("stock_move", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<string>("ContactName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_phone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<double?>("PrepaymentBalance")
                        .HasColumnType("double precision")
                        .HasColumnName("prepayment_balance");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_group_id");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("supplier_name");

                    b.Property<long?>("SupplierTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_type_id");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Vat")
                        .HasColumnType("integer")
                        .HasColumnName("vat");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("SupplierGroupId");

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("group_name");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("supplier_group", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_status");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long?>("GlAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("gl_account_id");

                    b.Property<bool?>("IsSettleCredit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_settle_credit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<double?>("PaidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("paid_amount");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentOption")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_option");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_type");

                    b.Property<string>("RefNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref_no");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("remark");

                    b.Property<string>("Series")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<double?>("SettlementAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("settlement_amount");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<double?>("TotalPaidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_paid_amount");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("GlAccountId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "Series" }, "idxj2xgusphcaj5mq9u9obuh6o4v");

                    b.ToTable("supplier_payment", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierPaymentReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<double?>("PaidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("paid_amount");

                    b.Property<double?>("PiAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("pi_amount");

                    b.Property<string>("PiNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pi_no");

                    b.Property<double?>("PoAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("po_amount");

                    b.Property<string>("PoNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("po_no");

                    b.Property<double?>("PrePaidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("pre_paid_amount");

                    b.Property<double?>("PrepaymentAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("prepayment_amount");

                    b.Property<int?>("PurchaseInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_invoice_id");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("SupplierPaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_payment_id");

                    b.Property<double?>("UnpaidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("unpaid_amount");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("SupplierPaymentId");

                    b.ToTable("supplier_payment_reference", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("supplier_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.TermCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("term_condition", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Territory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("territory_name");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("territory", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.TransactionJournal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BStatus")
                        .HasColumnType("integer")
                        .HasColumnName("b_status");

                    b.Property<long?>("ChartOfAccId")
                        .HasColumnType("bigint")
                        .HasColumnName("chart_of_acc_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<double?>("Credit")
                        .HasColumnType("double precision")
                        .HasColumnName("credit");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<double?>("Debit")
                        .HasColumnType("double precision")
                        .HasColumnName("debit");

                    b.Property<string>("GlCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gl_code");

                    b.Property<long?>("JournalEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("journal_entry_id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Ref")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccId");

                    b.HasIndex("JournalEntryId");

                    b.HasIndex(new[] { "GlCode" }, "uk_cbtgke7cl0j68qi8ufskdk013")
                        .IsUnique();

                    b.ToTable("transaction_journal", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.TransactionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<string>("TrxnName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("trxn_name");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("transaction_type", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Uom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("uom", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ValuationMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("MethodName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("method_name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("valuation_method", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Village", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommuneCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("commune_code");

                    b.Property<long>("CommuneId")
                        .HasColumnType("bigint")
                        .HasColumnName("commune_id");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("Village1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("village");

                    b.Property<string>("VillageKh")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("village_kh");

                    b.Property<string>("Villid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("villid");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("village", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("status")
                        .HasDefaultValueSql("true");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("warehouse_name");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ParentId");

                    b.ToTable("warehouse", (string)null);
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Account", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("fkgw84mgpacw9htdxcs2j1p7u6j");

                    b.HasOne("EFCoreAIGS.EF_ERP.Balance", "Balance")
                        .WithMany("Accounts")
                        .HasForeignKey("BalanceId")
                        .HasConstraintName("fk6qc52gy2x227bjs1exltnye4i");

                    b.HasOne("EFCoreAIGS.EF_ERP.Company", "Company")
                        .WithMany("Accounts")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fkyx9qhair86pc6tnbh322xjg4");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk316pn109iutn6yqoxrqp09cpc");

                    b.HasOne("EFCoreAIGS.EF_ERP.Account", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fkef5lfvm7tliuagpl8wibmrqd0");

                    b.Navigation("AccountType");

                    b.Navigation("Balance");

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountBill", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ClearBill", "AccountBillNavigation")
                        .WithMany("AccountBills")
                        .HasForeignKey("AccountBillId")
                        .HasConstraintName("fkhio30fgynlx7l0y2unnh32183");

                    b.HasOne("EFCoreAIGS.EF_ERP.Branch", "Branch")
                        .WithMany("AccountBills")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fkrhj3j3h9htss5jb0sexiv62mx");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "ChartOfAccount")
                        .WithMany("AccountBills")
                        .HasForeignKey("ChartOfAccountId")
                        .HasConstraintName("fkscjv73cmmlbvws3syb0h2sy9i");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("AccountBills")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fkbc9eca5khrmslb057wogk0at6");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("AccountBills")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fkfr49i4ptk84ac9op8f1ib1vmy");

                    b.HasOne("EFCoreAIGS.EF_ERP.TransactionType", "TransactionType")
                        .WithMany("AccountBills")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("fk934gx2tluclloegv07uscpwh4");

                    b.Navigation("AccountBillNavigation");

                    b.Navigation("Branch");

                    b.Navigation("ChartOfAccount");

                    b.Navigation("Currency");

                    b.Navigation("Supplier");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountBillItem", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.AccountBill", "AccountBill")
                        .WithMany("AccountBillItems")
                        .HasForeignKey("AccountBillId")
                        .HasConstraintName("fkhs2gbpt46mm38pn4hnwups77p");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "ChartOfAccount")
                        .WithMany("AccountBillItems")
                        .HasForeignKey("ChartOfAccountId")
                        .HasConstraintName("fk5xs5s5pn9w08ocie851r34qj9");

                    b.Navigation("AccountBill");

                    b.Navigation("ChartOfAccount");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountClass", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.BalanceSide", "BalanceSide")
                        .WithMany("AccountClasses")
                        .HasForeignKey("BalanceSideId")
                        .HasConstraintName("fk5vw2hd45fnso4weofdq950s1l");

                    b.Navigation("BalanceSide");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountMapping", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "ChartOfAcc")
                        .WithMany("AccountMappings")
                        .HasForeignKey("ChartOfAccId")
                        .HasConstraintName("fkjv10nysl8rtcd011k6shm644p");

                    b.HasOne("EFCoreAIGS.EF_ERP.TransactionType", "TrxnType")
                        .WithMany("AccountMappings")
                        .HasForeignKey("TrxnTypeId")
                        .HasConstraintName("fkon5k51nce6l8bkuxdo1xmqrlm");

                    b.Navigation("ChartOfAcc");

                    b.Navigation("TrxnType");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountSubClass", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.AccountClass", "AccountClass")
                        .WithMany("AccountSubClasses")
                        .HasForeignKey("AccountClassId")
                        .HasConstraintName("fk6fwg2pv06thu73nu3wam9s6qo");

                    b.Navigation("AccountClass");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Address", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("fkkkjn52mg1vha4yjpm0douso7f");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "BillingAddress")
                        .WithMany("AddressBillingAddresses")
                        .HasForeignKey("BillingAddressId")
                        .HasConstraintName("fkoithnn5ny5u7dvmxjpi3n2h25");

                    b.HasOne("EFCoreAIGS.EF_ERP.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fkpo044ng5x4gynb291cv24vtea");

                    b.HasOne("EFCoreAIGS.EF_ERP.Commune", "Commune")
                        .WithMany("Addresses")
                        .HasForeignKey("CommuneId")
                        .HasConstraintName("fkrgjcv55f47qp01ul9ilqpp1jm");

                    b.HasOne("EFCoreAIGS.EF_ERP.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fke54x81nmccsk5569hsjg1a6ka");

                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk93c3js0e22ll1xlu21nvrhqgg");

                    b.HasOne("EFCoreAIGS.EF_ERP.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fkqbjwfi50pdenou8j14knnffrh");

                    b.HasOne("EFCoreAIGS.EF_ERP.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("fkf8x0jfwoo94op8u88og1ohdcn");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "ShippingAddress")
                        .WithMany("AddressShippingAddresses")
                        .HasForeignKey("ShippingAddressId")
                        .HasConstraintName("fkefu76h3fpowk5ng2bdsdjh9hc");

                    b.HasOne("EFCoreAIGS.EF_ERP.Village", "Village")
                        .WithMany("Addresses")
                        .HasForeignKey("VillageId")
                        .HasConstraintName("fkgufu9edl0iiai9gwjs84iwmgb");

                    b.Navigation("AddressType");

                    b.Navigation("BillingAddress");

                    b.Navigation("City");

                    b.Navigation("Commune");

                    b.Navigation("Country");

                    b.Navigation("Customer");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("ShippingAddress");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AssetCategory", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlAccuDepre")
                        .WithMany("AssetCategoryGlAccuDepres")
                        .HasForeignKey("GlAccuDepreId")
                        .IsRequired()
                        .HasConstraintName("fkitvmc8cb391xfpr5k76n55640");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlCost")
                        .WithMany("AssetCategoryGlCosts")
                        .HasForeignKey("GlCostId")
                        .IsRequired()
                        .HasConstraintName("fkgipci61w74vdt6mhvmpefsdh6");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlDepreExp")
                        .WithMany("AssetCategoryGlDepreExps")
                        .HasForeignKey("GlDepreExpId")
                        .IsRequired()
                        .HasConstraintName("fkt4wvplrq32ma9rplku5y2qleg");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlGain")
                        .WithMany("AssetCategoryGlGains")
                        .HasForeignKey("GlGainId")
                        .IsRequired()
                        .HasConstraintName("fkmu8qlkcx64ql2g9fsi84c79f3");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlLoss")
                        .WithMany("AssetCategoryGlLosses")
                        .HasForeignKey("GlLossId")
                        .IsRequired()
                        .HasConstraintName("fk8bso12kxoyruf5d3e99kmcq4t");

                    b.Navigation("GlAccuDepre");

                    b.Navigation("GlCost");

                    b.Navigation("GlDepreExp");

                    b.Navigation("GlGain");

                    b.Navigation("GlLoss");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.BarcodeItem", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.BarcodeType", "BarcodeType")
                        .WithMany("BarcodeItems")
                        .HasForeignKey("BarcodeTypeId")
                        .IsRequired()
                        .HasConstraintName("fkag1r3x54g4011fd73rsse0hp4");

                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("BarcodeItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkguxlr06grt0vq0kxe00w7q9v8");

                    b.Navigation("BarcodeType");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ChartOfAccount", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.AccountClass", "AccountClass")
                        .WithMany("ChartOfAccounts")
                        .HasForeignKey("AccountClassId")
                        .HasConstraintName("fkchnxkh169tc4p2mvgjwk6wem0");

                    b.HasOne("EFCoreAIGS.EF_ERP.AccountSubClass", "AccountSubClass")
                        .WithMany("ChartOfAccounts")
                        .HasForeignKey("AccountSubClassId")
                        .HasConstraintName("fkdq4k1slnqurdocfji02kjx9xl");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fki15llbslked3px8fhpu9wmeyv");

                    b.Navigation("AccountClass");

                    b.Navigation("AccountSubClass");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ClearBill", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Branch", "Branch")
                        .WithMany("ClearBills")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fkcxv7b1s6vpgn18fjkq1dr9k8c");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "ChartOfAccount")
                        .WithMany("ClearBills")
                        .HasForeignKey("ChartOfAccountId")
                        .HasConstraintName("fk8pj436wro0loy9unwj652sfup");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("ClearBills")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fkr68himos2hsvmxa3ijrfqo42c");

                    b.HasOne("EFCoreAIGS.EF_ERP.PaymentMethod", "PaymentMethod")
                        .WithMany("ClearBills")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("fkd5yjowqgyt5mkwg2gq22qu1v");

                    b.HasOne("EFCoreAIGS.EF_ERP.TransactionType", "TransactionType")
                        .WithMany("ClearBills")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("fk9t8ys3m5xd0c47r4jrim84jh0");

                    b.Navigation("Branch");

                    b.Navigation("ChartOfAccount");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CoaBalance", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Branch", "Branch")
                        .WithMany("CoaBalances")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fkjxfa7dai3h6b325lv6lhi18c2");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "ChartOfAccount")
                        .WithMany("CoaBalances")
                        .HasForeignKey("ChartOfAccountId")
                        .HasConstraintName("fkeloeomrdnfddh2ifk3c4lr8q7");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("CoaBalances")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fkgptqjaslktx3wlrqupc5cbsri");

                    b.Navigation("Branch");

                    b.Navigation("ChartOfAccount");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Commune", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.District", "District")
                        .WithMany("Communes")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("fkjhf1rxvyl4a736j0xjyuqywdr");

                    b.Navigation("District");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Company", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fkaa85rotlnir4w4xlj1nkilnws");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("Companies")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk6ukoma5ydy94w070ewmn7udfy");

                    b.HasOne("EFCoreAIGS.EF_ERP.Domain", "Domain")
                        .WithMany("Companies")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("fkrxopcubjl5kvrx8fwf9vv9mom");

                    b.HasOne("EFCoreAIGS.EF_ERP.FinanceBook", "FinanceBook")
                        .WithMany("Companies")
                        .HasForeignKey("FinanceBookId")
                        .HasConstraintName("fkejx9exwuci0durwyeu04e3rw5");

                    b.HasOne("EFCoreAIGS.EF_ERP.LetterHead", "LetterHead")
                        .WithMany("Companies")
                        .HasForeignKey("LetterHeadId")
                        .HasConstraintName("fkq0oaas2qxv289cnkadhq1b6y8");

                    b.HasOne("EFCoreAIGS.EF_ERP.Company", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fkgsxt4pb7gewmc5v44h53lu1bn");

                    b.HasOne("EFCoreAIGS.EF_ERP.TermCondition", "TermCondition")
                        .WithMany("Companies")
                        .HasForeignKey("TermConditionId")
                        .HasConstraintName("fk44tv95tmlycg04ocoab73f8gy");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("Companies")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fkb6r1lhl3xmxagt26dpo5rta");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("Domain");

                    b.Navigation("FinanceBook");

                    b.Navigation("LetterHead");

                    b.Navigation("Parent");

                    b.Navigation("TermCondition");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Contact", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Gender", "Gender")
                        .WithMany("Contacts")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("fkgmv5ta5o5sa1hcsjgjkm8r3c6");

                    b.HasOne("EFCoreAIGS.EF_ERP.Salutation", "Salutation")
                        .WithMany("Contacts")
                        .HasForeignKey("SalutationId")
                        .HasConstraintName("fk2acklccxwjo1rgr6is2ih6ig6");

                    b.Navigation("Gender");

                    b.Navigation("Salutation");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CreditNote", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("CreditNotes")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fkjnm35f89ygl7dry1owswglhqm");

                    b.HasOne("EFCoreAIGS.EF_ERP.Invoice", "Invoice")
                        .WithMany("CreditNotes")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk89mv8mrynbjxoc6khjkbfibeb");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Customer", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("Customers")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk3fqcpx7dko5slv9s6m31cm4g1");

                    b.HasOne("EFCoreAIGS.EF_ERP.CustomerGroup", "CustomerGroup")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerGroupId")
                        .IsRequired()
                        .HasConstraintName("fk9ogndo8hll7edx5iloyu2uegy");

                    b.HasOne("EFCoreAIGS.EF_ERP.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("fk1lt23ie2trgs1r42hqyhliedv");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("Customers")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fkdy9yo0g543vri6m5ev1aj2d5");

                    b.HasOne("EFCoreAIGS.EF_ERP.SalePerson", "SalePerson")
                        .WithMany("Customers")
                        .HasForeignKey("SalePersonId")
                        .HasConstraintName("fkhmrknj1oisejx0n7kqagqnesc");

                    b.HasOne("EFCoreAIGS.EF_ERP.Salutation", "Salutation")
                        .WithMany("Customers")
                        .HasForeignKey("SalutationId")
                        .HasConstraintName("fknax78wl40ln4p5jm32scouq0w");

                    b.HasOne("EFCoreAIGS.EF_ERP.Territory", "Territory")
                        .WithMany("Customers")
                        .HasForeignKey("TerritoryId")
                        .HasConstraintName("fkaamb70smwnslvwf80j4bc50c4");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("Customers")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fki95uujr0h5h486a8pbshc7vmw");

                    b.Navigation("Currency");

                    b.Navigation("CustomerGroup");

                    b.Navigation("Gender");

                    b.Navigation("PriceList");

                    b.Navigation("SalePerson");

                    b.Navigation("Salutation");

                    b.Navigation("Territory");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerBalance", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("CustomerBalances")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fkf9n8fwyfughgs7taql4xunicf");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerGroup", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.CustomerGroup", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fkcpbibhc11a9caqc66e8vl4ka8");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("CustomerGroups")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fk8s2k6mrko7c9ejj19f6ld47gd");

                    b.HasOne("EFCoreAIGS.EF_ERP.TermCondition", "TermCondition")
                        .WithMany("CustomerGroups")
                        .HasForeignKey("TermConditionId")
                        .HasConstraintName("fk2cwn4lsofnxxbj1b46lrlpwqx");

                    b.Navigation("Parent");

                    b.Navigation("PriceList");

                    b.Navigation("TermCondition");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPaymentEntry", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("CustomerPaymentEntries")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk57sy5m9sf7dd7yaf3gf16atr2");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlAccount")
                        .WithMany("CustomerPaymentEntries")
                        .HasForeignKey("GlAccountId")
                        .HasConstraintName("fkh22nmln0o6nj96uc5xpevh79q");

                    b.Navigation("Customer");

                    b.Navigation("GlAccount");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPaymentEntryReference", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.CustomerPaymentEntry", "CustomerPaymentEntry")
                        .WithMany("CustomerPaymentEntryReferences")
                        .HasForeignKey("CustomerPaymentEntryId")
                        .HasConstraintName("fks7foprukq05ox9qs8iu7rvvo");

                    b.Navigation("CustomerPaymentEntry");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPrePayment", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("CustomerPrePayments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk5do5kmq9ptjkx0gfhh9925gtr");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlAccount")
                        .WithMany("CustomerPrePayments")
                        .HasForeignKey("GlAccountId")
                        .HasConstraintName("fk8e4mhvbv2tkwp6m8vhxexa8aj");

                    b.Navigation("Customer");

                    b.Navigation("GlAccount");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPrePaymentReference", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.CustomerPrePayment", "CustomerPrePayment")
                        .WithMany("CustomerPrePaymentReferences")
                        .HasForeignKey("CustomerPrePaymentId")
                        .HasConstraintName("fk4a13ldm66l93qnhp6qktcwev5");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "SaleOrder")
                        .WithMany("CustomerPrePaymentReferences")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("fk3gy7lieq388f2f6tx7awlmima");

                    b.Navigation("CustomerPrePayment");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DebitNote", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseReturn", "PurchaseReturn")
                        .WithMany("DebitNotes")
                        .HasForeignKey("PurchaseReturnId")
                        .HasConstraintName("fkfugvyrn4myafsc8akbdqakt6r");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("DebitNotes")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fkqxg5f0dimqahtdr2oncw9c1t");

                    b.Navigation("PurchaseReturn");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DeliveryNote", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fkseacucm0oxv4jc7r2gnyumn63");

                    b.HasOne("EFCoreAIGS.EF_ERP.DeliveryType", "DeliveryType")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("DeliveryTypeId")
                        .HasConstraintName("fkaiucygc91ane0529jku2xmf1d");

                    b.HasOne("EFCoreAIGS.EF_ERP.Driver", "Driver")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk17mxrj7yugeib8lnlqhc8cd9w");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "SaleOrder")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("fka23892al36fcn71e9bcok898e");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fkkwdm71exscpr91q9nij9ldfnb");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryType");

                    b.Navigation("Driver");

                    b.Navigation("SaleOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DeliveryNoteDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.DeliveryNote", "DeliveryNote")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("DeliveryNoteId")
                        .HasConstraintName("fkblpd8dld5cwhkldgkadcmgmwf");

                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk3i76varnkfb5q1dcslgrmw2ps");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fk5yeex2kdj183yd3nx3sc2ayom");

                    b.Navigation("DeliveryNote");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.District", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("fk276utu38g5lgqeth6pwfm3rw2");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Driver", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.DriverStatus", "DriverStatus")
                        .WithMany("Drivers")
                        .HasForeignKey("DriverStatusId")
                        .HasConstraintName("fk90r4l5ytsw0lku0pyj5m9k1nc");

                    b.HasOne("EFCoreAIGS.EF_ERP.Employee", "Employee")
                        .WithMany("Drivers")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fkq2af0erpwyy7ubrwn7hoo23t");

                    b.Navigation("DriverStatus");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Employee", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk5v50ed2bjh60n1gc7ifuxmgf4");

                    b.HasOne("EFCoreAIGS.EF_ERP.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .HasConstraintName("fkks0jnjwhw9tjwa2b1l0klv1fb");

                    b.HasOne("EFCoreAIGS.EF_ERP.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("fke0w26qjedr99vwno4pqauw9i9");

                    b.HasOne("EFCoreAIGS.EF_ERP.HealthInsurance", "HealthInsurance")
                        .WithMany("Employees")
                        .HasForeignKey("HealthInsuranceId")
                        .HasConstraintName("fk4ndp9leoqaddrmvfl6w90oefe");

                    b.HasOne("EFCoreAIGS.EF_ERP.Salutation", "Salutation")
                        .WithMany("Employees")
                        .HasForeignKey("SalutationId")
                        .HasConstraintName("fks2cicw7ryjpxendgeb5bxqhld");

                    b.Navigation("Company");

                    b.Navigation("EmployeeType");

                    b.Navigation("Gender");

                    b.Navigation("HealthInsurance");

                    b.Navigation("Salutation");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Glentry", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "ChartOfAcc")
                        .WithMany("Glentries")
                        .HasForeignKey("ChartOfAccId")
                        .HasConstraintName("fkgaus8fntma0p3c8qbhut19hrq");

                    b.HasOne("EFCoreAIGS.EF_ERP.Company", "Company")
                        .WithMany("Glentries")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fkrwsauigc92o8nmet06v3tdahx");

                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("Glentries")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fkqyejgrlqjbvb5i6s9pcif0a1l");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("Glentries")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fkddkiafnm6b7943wkm27ga05cp");

                    b.Navigation("ChartOfAcc");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Invoice", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk5e32ukwo9uknwhylogvta4po6");

                    b.HasOne("EFCoreAIGS.EF_ERP.DeliveryNote", "DeliveryNote")
                        .WithMany("Invoices")
                        .HasForeignKey("DeliveryNoteId")
                        .HasConstraintName("fk6g33jwwe19ep5yl3p2cfpy40j");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "SaleOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("fkt7avycfyg7220eq428hogylmw");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("Invoices")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk9ssjinbkdd04ccgtua4tjy5n9");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryNote");

                    b.Navigation("SaleOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.InvoiceDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk4kdkykjwo7h7hj6qgs8cxtf3b");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fkqdciiqn3rbn01conu2cpcpo3k");

                    b.HasOne("EFCoreAIGS.EF_ERP.Invoice", "SaleInvoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("SaleInvoiceId")
                        .HasConstraintName("fk3kqpm1vs7me9627k0v69yrhxf");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("SaleInvoice");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Item", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ItemBrand", "ItemBrand")
                        .WithMany("Items")
                        .HasForeignKey("ItemBrandId")
                        .HasConstraintName("fkk5mprfnrchdrqapx2sjpydncx");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemGroup", "ItemGroup")
                        .WithMany("Items")
                        .HasForeignKey("ItemGroupId")
                        .HasConstraintName("fkr4fbv7293k0b5v1qjk5lm6md");

                    b.HasOne("EFCoreAIGS.EF_ERP.Uom", "Uom")
                        .WithMany("Items")
                        .HasForeignKey("UomId")
                        .IsRequired()
                        .HasConstraintName("fk5aoeq4pcgvoaqjlyhbokvkg8v");

                    b.HasOne("EFCoreAIGS.EF_ERP.ValuationMethod", "ValuationMethod")
                        .WithMany("Items")
                        .HasForeignKey("ValuationMethodId")
                        .IsRequired()
                        .HasConstraintName("fkryv8p97mmc5q7dcbupht6w480");

                    b.Navigation("ItemBrand");

                    b.Navigation("ItemGroup");

                    b.Navigation("Uom");

                    b.Navigation("ValuationMethod");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemAttributeDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ItemAttribute", "ItemAttribute")
                        .WithMany("ItemAttributeDetails")
                        .HasForeignKey("ItemAttributeId")
                        .HasConstraintName("fkceojhsp72n0ex7mpjx0k6074");

                    b.Navigation("ItemAttribute");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemAttributeValue", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ItemAttributeDetail", "ItemAttributeDetail")
                        .WithMany("ItemAttributeValues")
                        .HasForeignKey("ItemAttributeDetailId")
                        .IsRequired()
                        .HasConstraintName("fkt9b6s94x0po7n5elu68pt02il");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemAttribute", "ItemAttribute")
                        .WithMany("ItemAttributeValues")
                        .HasForeignKey("ItemAttributeId")
                        .IsRequired()
                        .HasConstraintName("fkc3m663h01tr58i97ageb3q1b2");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemItem", "ItemItem")
                        .WithMany("ItemAttributeValues")
                        .HasForeignKey("ItemItemId")
                        .HasConstraintName("fkp1k0ionspjil7j8ba6xti00op");

                    b.Navigation("ItemAttribute");

                    b.Navigation("ItemAttributeDetail");

                    b.Navigation("ItemItem");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemGroup", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ItemGroup", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fkh0gygywjj17k1o53qhp4xf30r");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemImage", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fkta6kqet3u8mv95y7jwtgwqpys");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemInventory", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("ItemInventories")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkis34mg9pc892kd0968g1rb9pt");

                    b.HasOne("EFCoreAIGS.EF_ERP.MaterialRequestType", "MaterialRequestType")
                        .WithMany("ItemInventories")
                        .HasForeignKey("MaterialRequestTypeId")
                        .HasConstraintName("fkj76kdqef8gk747i5cfbedl6ws");

                    b.HasOne("EFCoreAIGS.EF_ERP.Uom", "Uom")
                        .WithMany("ItemInventories")
                        .HasForeignKey("UomId")
                        .HasConstraintName("fk6oelp1ry3gkt32xvtqexgxuvp");

                    b.HasOne("EFCoreAIGS.EF_ERP.ValuationMethod", "ValuationMethod")
                        .WithMany("ItemInventories")
                        .HasForeignKey("ValuationMethodId")
                        .HasConstraintName("fkdiceow5ur2ts2ltn134gx1wmu");

                    b.Navigation("Item");

                    b.Navigation("MaterialRequestType");

                    b.Navigation("Uom");

                    b.Navigation("ValuationMethod");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemItem", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("ItemItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkff1l0bmjpu0195wgbbvxpuxl1");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemPrice", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("ItemPrices")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk4p9i8tsrcavtdhnwekx7pghxn");

                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("ItemPrices")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fke6ivp7ms01x65oq2amsv5hrl0");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("ItemPrices")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fkj0rvvgppk8fl8iqyoaw2kgwcr");

                    b.Navigation("Currency");

                    b.Navigation("Item");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemTax", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Account", "Account")
                        .WithMany("ItemTaxes")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("fkpcr0c4d5h8jy2wmulevnlfcj5");

                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("ItemTaxes")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fksj5f0qcjcyy39lcqhrxw7ovd0");

                    b.Navigation("Account");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemVarrantUom", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("ItemVarrantUoms")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkhkhuhqacy55nhm70lfwv12x95");

                    b.HasOne("EFCoreAIGS.EF_ERP.Uom", "Uom")
                        .WithMany("ItemVarrantUoms")
                        .HasForeignKey("UomId")
                        .HasConstraintName("fkji7fvit04ksijrmfcdnln04hw");

                    b.Navigation("Item");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemWarehouse", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Company", "Company")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fkbytqw7u56ln8ib2g0wymfrwa0");

                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk68qrrw32tlahocw3luuxmo9lt");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fkc4ouc0dxe9v9c157njyn4782u");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fktb7uwg7judhe1j4kcw9hpgqcd");

                    b.Navigation("Company");

                    b.Navigation("Item");

                    b.Navigation("PriceList");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.JournalEntry", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Branch", "Branch")
                        .WithMany("JournalEntries")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fkbnb3pu15kojh5fnvt4sg1h6xs");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("JournalEntries")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk9vvudw1ifwc61ur2wq6sg8kso");

                    b.HasOne("EFCoreAIGS.EF_ERP.TransactionType", "TrxnType")
                        .WithMany("JournalEntries")
                        .HasForeignKey("TrxnTypeId")
                        .HasConstraintName("fkcfyxo2h09ja6mfhua00pxu47i");

                    b.Navigation("Branch");

                    b.Navigation("Currency");

                    b.Navigation("TrxnType");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Permission", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Feature", "Feature")
                        .WithOne("Permission")
                        .HasForeignKey("EFCoreAIGS.EF_ERP.Permission", "FeatureId")
                        .IsRequired()
                        .HasConstraintName("fkjgkobdkd3ujnxlvrtpf19x68j");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PriceList", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("PriceLists")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fkc06v5ro9p64ywvhc589nhaygn");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseInvoice", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fknq1hm13475eygvfhocnu7gubi");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("fkqv5xl4xgrxpd7fk8kjhlj3wo0");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseReceipt", "PurchaseReceipt")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("PurchaseReceiptId")
                        .HasConstraintName("fkcakafkke1058qmmjpqlpvrajn");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fkqtx4kjstn77n9v4wowt0mlxkx");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fktmqydvbl95w50omj8h8fe3xge");

                    b.Navigation("Currency");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseReceipt");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseInvoiceDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("PurchaseInvoiceDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk4yll33q6jlrhfi6fykxer4qrv");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("PurchaseInvoiceDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fknutdjywmxf8dtyfjfm5fd9bbq");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceDetails")
                        .HasForeignKey("PurchaseInvoiceId")
                        .HasConstraintName("fkdc7bo3dg79p1cmcr0vwf3kxsy");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseInvoicePurchaseInvoiceDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseInvoiceDetail", "PurchaseInvoiceDetail")
                        .WithOne()
                        .HasForeignKey("EFCoreAIGS.EF_ERP.PurchaseInvoicePurchaseInvoiceDetail", "PurchaseInvoiceDetailId")
                        .IsRequired()
                        .HasConstraintName("fkama1ihgl41btxcmihmo9to459");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceId")
                        .IsRequired()
                        .HasConstraintName("fkrbcchir06n1vkv4shy0ep16bj");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("PurchaseInvoiceDetail");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseItem", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk4voj5rjjn6ofwsp9qk70w2tga");

                    b.HasOne("EFCoreAIGS.EF_ERP.Uom", "Uom")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("UomId")
                        .HasConstraintName("fk9cikvj5nf90g3t18gkt7r7jju");

                    b.Navigation("Item");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseOrder", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Contact", "Contact")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fkkqescxsvxsm2o454b36rlmdax");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fkijpaw9ak0pnsorfdl9dej85kx");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fkil76wgv3woyccv917kxd0yakh");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk4traogu3jriq9u7e8rvm86k7i");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fkfn0kri8xb0mi8bkb2swlnv581");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("PriceList");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseOrderDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkkl3w9bo79qh9eat9qyxkvvchs");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fkmwllceinbhnwsao7ggvu95ju");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("fki6xlnsg9o9ght6xcwl51ooa4k");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReceipt", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Contact", "Contact")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk2c6a1tn7eyhgxc5wxfy1s3co5");

                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fkay0iqp4vpc99mulfa52pecte8");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fknljtk7avkhubpn0rhctnbu971");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("fkfmwniv5hy3skbyhslnff7o0bj");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk1i0giyt54cl1nege2tj2f3nlu");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fkp6wbcrpolpl8r94tupe2doi70");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("PriceList");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReceiptDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("PurchaseReceiptDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkutom30tugx82jmgrw8d953q0");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("PurchaseReceiptDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fk61w97fs23xjv2jnhtwsjsuj4t");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseReceipt", "PurchaseReceipt")
                        .WithMany("PurchaseReceiptDetails")
                        .HasForeignKey("PurchaseReceiptId")
                        .HasConstraintName("fk94l1gahvt7cxj9ydlakm1dh83");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("PurchaseReceipt");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReceiptExpanse", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ExpanseCategory", "ExpanseCategory")
                        .WithMany("PurchaseReceiptExpanses")
                        .HasForeignKey("ExpanseCategoryId")
                        .HasConstraintName("fkh0gj7cyw3k5s97i7gqouunkbo");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseReceipt", "PurchaseReceipt")
                        .WithMany("PurchaseReceiptExpanses")
                        .HasForeignKey("PurchaseReceiptId")
                        .HasConstraintName("fkikgyhuxjxb5h9jpifv3inoipa");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("PurchaseReceiptExpanses")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk7g5xfebu7c91mmkmhpgst18ml");

                    b.Navigation("ExpanseCategory");

                    b.Navigation("PurchaseReceipt");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseRefund", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.DebitNote", "DebitNote")
                        .WithMany("PurchaseRefunds")
                        .HasForeignKey("DebitNoteId")
                        .HasConstraintName("fkkckiis3148kh5byh03ox71ckp");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlAccount")
                        .WithMany("PurchaseRefunds")
                        .HasForeignKey("GlAccountId")
                        .HasConstraintName("fkb5qwcr5so9wu5ht0sll55gvj2");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("PurchaseRefunds")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fkqfd8ae7ltgilf1p828iln5170");

                    b.Navigation("DebitNote");

                    b.Navigation("GlAccount");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReturn", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk9w5jqdyl12gvwaxagisj6u3gk");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fkt2k98i6ounmgnvoexk2rlpugp");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReturnDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkios10qt5oav8wfckvrk4b9qn1");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fkpqo3sxgfygnr4ptgo1qp0xdpf");

                    b.HasOne("EFCoreAIGS.EF_ERP.PurchaseReturn", "PurchaseReturn")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("PurchaseReturnId")
                        .HasConstraintName("fkey1pgajbkxxdumqifvfpu3x55");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Quotation", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("Quotations")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fkriqr781i8uaks8kw4hipfejmu");

                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fklf5ti8fw77uew5ivt1rh1dlrd");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("Quotations")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fkqw4us6raa0axrfll4utr2jyyh");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "SaleOrder")
                        .WithMany("Quotations")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("fk8a34ncoptrruc4powlgob0yc5");

                    b.HasOne("EFCoreAIGS.EF_ERP.SalePerson", "SalePerson")
                        .WithMany("Quotations")
                        .HasForeignKey("SalePersonId")
                        .HasConstraintName("fkpjff3qs6do3e4423n7583n4oh");

                    b.HasOne("EFCoreAIGS.EF_ERP.TermCondition", "TermCondition")
                        .WithMany("Quotations")
                        .HasForeignKey("TermConditionId")
                        .HasConstraintName("fknyfnm3d1yknkkxg43x23k96va");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("Quotations")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk5n98enejkc4c61wvjendapyeb");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("PriceList");

                    b.Navigation("SaleOrder");

                    b.Navigation("SalePerson");

                    b.Navigation("TermCondition");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.QuotationDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk35aokq9ogjh42ekkv5n6n78o");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fkt222p3ii54d1qstkcymb0osch");

                    b.HasOne("EFCoreAIGS.EF_ERP.Quotation", "Quotation")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("fk5uhuhl4i0dvr1lqwn3cv35wl");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Refund", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.CreditNote", "CreditNote")
                        .WithMany("Refunds")
                        .HasForeignKey("CreditNoteId")
                        .HasConstraintName("fkmj8r0hapy9gevko3ioskaolcl");

                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("Refunds")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk4g7imna3evv9fxup6kdhbm5hu");

                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlAccount")
                        .WithMany("Refunds")
                        .HasForeignKey("GlAccountId")
                        .HasConstraintName("fkhw0lummngd0f8k4qloc90rpxg");

                    b.HasOne("EFCoreAIGS.EF_ERP.Invoice", "Invoice")
                        .WithMany("Refunds")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk4ny5ywx78sgoir4c4gifedx7e");

                    b.Navigation("CreditNote");

                    b.Navigation("Customer");

                    b.Navigation("GlAccount");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.RoleMenu", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.MenuItem", "MenuItem")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuItemId")
                        .IsRequired()
                        .HasConstraintName("fk6829se8jshcx4di58icvqvh9q");

                    b.HasOne("EFCoreAIGS.EF_ERP.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fkqyvxw2gg2qk0wld3bqfcb58vq");

                    b.Navigation("MenuItem");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.RolePermission", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("fkf8yllw1ecvwqy3ehyxawqa1qp");

                    b.HasOne("EFCoreAIGS.EF_ERP.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fka6jx8n8xkesmjmv6jqug6bg68");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleOrder", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk6e9jxg1jpu3b8dro6diuphdn8");

                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fkfe1q5gxqihxkop8uycrfuxg5j");

                    b.HasOne("EFCoreAIGS.EF_ERP.PriceList", "PriceList")
                        .WithMany("SaleOrders")
                        .HasForeignKey("PriceListId")
                        .HasConstraintName("fk66ivraj759yed1m8bow8o2q6l");

                    b.HasOne("EFCoreAIGS.EF_ERP.Quotation", "Quotation")
                        .WithMany("SaleOrders")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("fkgk5vd2s6eqpcd2lxwu5miocao");

                    b.HasOne("EFCoreAIGS.EF_ERP.SalePerson", "SalePerson")
                        .WithMany("SaleOrders")
                        .HasForeignKey("SalePersonId")
                        .HasConstraintName("fk8bf2b8po4cpyc8jew5ve43ohm");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("SaleOrders")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fkntbtuvtqepg0h1tb05joy0l4s");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("PriceList");

                    b.Navigation("Quotation");

                    b.Navigation("SalePerson");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleOrderDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkeeka85wbcfp5b70e8479j8c4f");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fk9anlq0du5k2322fcpofmsarvl");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("fk1isrkdb4ekuoeo7dsbyw1s9u0");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SalePerson", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Employee", "Employee")
                        .WithMany("SalePeople")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fke1u58xw55ol3s4rc87svsfe8q");

                    b.HasOne("EFCoreAIGS.EF_ERP.SalePerson", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fkflejc15b52ujrc08i883407cg");

                    b.Navigation("Employee");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleReturn", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Currency", "Currency")
                        .WithMany("SaleReturns")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk68j2wpxymba2ile9k5lq8x5cv");

                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("SaleReturns")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fkra8c7dye3yyej114bpakbjk8n");

                    b.HasOne("EFCoreAIGS.EF_ERP.DeliveryNote", "DeliveryNote")
                        .WithMany("SaleReturns")
                        .HasForeignKey("DeliveryNoteId")
                        .HasConstraintName("fk6tbidj5qv83lp9btbv15yf2mm");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleOrder", "SaleOrder")
                        .WithMany("SaleReturns")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("fk7bxrucp94ndc7snxo8dhav0ce");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("SaleReturns")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fklysn5lt6og1g77kqw54sshy1s");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryNote");

                    b.Navigation("SaleOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleReturnDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("SaleReturnDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkfxgvy4ow09mqstbro5sax7g17");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemVarrantUom", "ItemVariantUom")
                        .WithMany("SaleReturnDetails")
                        .HasForeignKey("ItemVariantUomId")
                        .HasConstraintName("fkpqhbwdicpcl4ag79s35ua001t");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleReturn", "SaleReturn")
                        .WithMany("SaleReturnDetails")
                        .HasForeignKey("SaleReturnId")
                        .HasConstraintName("fkg35ss7j8mod4vc6w2hgpgooce");

                    b.Navigation("Item");

                    b.Navigation("ItemVariantUom");

                    b.Navigation("SaleReturn");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleTaxCharge", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Company", "Company")
                        .WithMany("SaleTaxCharges")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fkbt8g92toapbsl1elxgjt77fqf");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleTaxDetail", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Account", "Account")
                        .WithMany("SaleTaxDetails")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fkkqgdffk6oaepnpjsden2u5bm6");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleTaxCharge", "SaleTaxCharge")
                        .WithMany("SaleTaxDetails")
                        .HasForeignKey("SaleTaxChargeId")
                        .HasConstraintName("fkby4kj0dhqm4f2kntq6ieo8mao");

                    b.HasOne("EFCoreAIGS.EF_ERP.SaleTaxType", "SaleTaxType")
                        .WithMany("SaleTaxDetails")
                        .HasForeignKey("SaleTaxTypeId")
                        .HasConstraintName("fka7i73g2fd1adm4pla4w0lxif5");

                    b.Navigation("Account");

                    b.Navigation("SaleTaxCharge");

                    b.Navigation("SaleTaxType");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Salutation", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Gender", "Gender")
                        .WithMany("Salutations")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("fk1vf62tr3xbb80r9r7wvnacqts");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SerialNo", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Customer", "Customer")
                        .WithMany("SerialNos")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk12whkb1ay28e7tb5gtyrvf7al");

                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("SerialNos")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk6lj6wh3asrk2hko0svbdt35rl");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("SerialNos")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fkrq4108andi458n7l5m2scxjj7");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("SerialNos")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk82emfq13asu8nd6f6k38vc3d9");

                    b.Navigation("Customer");

                    b.Navigation("Item");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.StockBalance", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Company", "Company")
                        .WithMany("StockBalances")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fktgjh58semjd1j5or2c2wwwsbb");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemBrand", "ItemBrand")
                        .WithMany("StockBalances")
                        .HasForeignKey("ItemBrandId")
                        .HasConstraintName("fk6rl1ityt6rj170agffi8y1s0w");

                    b.HasOne("EFCoreAIGS.EF_ERP.ItemGroup", "ItemGroup")
                        .WithMany("StockBalances")
                        .HasForeignKey("ItemGroupId")
                        .HasConstraintName("fkt3lfdsnlyvsmvricin7gq4weu");

                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("StockBalances")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkkx446h9kl3uhwk4aik8mf7txy");

                    b.HasOne("EFCoreAIGS.EF_ERP.Uom", "Uom")
                        .WithMany("StockBalances")
                        .HasForeignKey("UomId")
                        .HasConstraintName("fktncstwbue2v1tk2uu8dhv1mly");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("StockBalances")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk8r5c5n53qfm24rbnloy0352fx");

                    b.Navigation("Company");

                    b.Navigation("Item");

                    b.Navigation("ItemBrand");

                    b.Navigation("ItemGroup");

                    b.Navigation("Uom");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.StockLedgerEntry", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("StockLedgerEntries")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkgd0tsaayq87j3kc1fkxyf4826");

                    b.HasOne("EFCoreAIGS.EF_ERP.Uom", "Uom")
                        .WithMany("StockLedgerEntries")
                        .HasForeignKey("UomId")
                        .HasConstraintName("fk1xb8wim7g2yis2kfet61xewm4");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("StockLedgerEntries")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk92dind6o2qd7h1gvpbhe43dv7");

                    b.Navigation("Item");

                    b.Navigation("Uom");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.StockMove", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Item", "Item")
                        .WithMany("StockMoves")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fkod2pcvaos1am5wtio2rapiuxa");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Warehouse")
                        .WithMany("StockMoves")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fka1n7nvnm1y225ioj500iu0jgp");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Supplier", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.SupplierGroup", "SupplierGroup")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierGroupId")
                        .HasConstraintName("fkesu19c23q6lq24pou4hk02fxl");

                    b.HasOne("EFCoreAIGS.EF_ERP.SupplierType", "SupplierType")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierTypeId")
                        .HasConstraintName("fki8frtsnt5d9v8bljvk9ce7e49");

                    b.Navigation("SupplierGroup");

                    b.Navigation("SupplierType");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierGroup", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.SupplierGroup", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk7n6ugl6r3fnvug1li4j75yiai");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierPayment", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "GlAccount")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("GlAccountId")
                        .HasConstraintName("fk37powsao54q2lixsdroi931s2");

                    b.HasOne("EFCoreAIGS.EF_ERP.Supplier", "Supplier")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fkqy7og5c3psvi8j5yn2lmrki7x");

                    b.Navigation("GlAccount");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierPaymentReference", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.SupplierPayment", "SupplierPayment")
                        .WithMany("SupplierPaymentReferences")
                        .HasForeignKey("SupplierPaymentId")
                        .HasConstraintName("fk6d3jm63jygvlx10hevm5xt9h5");

                    b.Navigation("SupplierPayment");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Territory", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Territory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk7nloh1mltgwne5y78ttnr31s1");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.TransactionJournal", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.ChartOfAccount", "ChartOfAcc")
                        .WithMany("TransactionJournals")
                        .HasForeignKey("ChartOfAccId")
                        .HasConstraintName("fknnqnwmbgyqav3myhdcqs2pb0r");

                    b.HasOne("EFCoreAIGS.EF_ERP.JournalEntry", "JournalEntry")
                        .WithMany("TransactionJournals")
                        .HasForeignKey("JournalEntryId")
                        .HasConstraintName("fk6ii7t9iwrqgpvarphfooha64v");

                    b.Navigation("ChartOfAcc");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.User", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fkixo09sv3j1j6hfox3cx6d2ggg");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.UserRole", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fka68196081fvovjhkek5m97n3y");

                    b.HasOne("EFCoreAIGS.EF_ERP.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fkj345gk1bovqvfame88rcx7yyx");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Village", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Commune", "Commune")
                        .WithMany("Villages")
                        .HasForeignKey("CommuneId")
                        .IsRequired()
                        .HasConstraintName("fkcrrurypoayljvp4qlwqxkivvl");

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Warehouse", b =>
                {
                    b.HasOne("EFCoreAIGS.EF_ERP.Account", "Account")
                        .WithMany("Warehouses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk70sqwlljiffsgp99br2hxtrkf");

                    b.HasOne("EFCoreAIGS.EF_ERP.Warehouse", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fklfiv9cjr48uvfjtw9knmnqpl0");

                    b.Navigation("Account");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Account", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("ItemTaxes");

                    b.Navigation("SaleTaxDetails");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountBill", b =>
                {
                    b.Navigation("AccountBillItems");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountClass", b =>
                {
                    b.Navigation("AccountSubClasses");

                    b.Navigation("ChartOfAccounts");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountSubClass", b =>
                {
                    b.Navigation("ChartOfAccounts");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Balance", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.BalanceSide", b =>
                {
                    b.Navigation("AccountClasses");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.BarcodeType", b =>
                {
                    b.Navigation("BarcodeItems");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Branch", b =>
                {
                    b.Navigation("AccountBills");

                    b.Navigation("ClearBills");

                    b.Navigation("CoaBalances");

                    b.Navigation("JournalEntries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ChartOfAccount", b =>
                {
                    b.Navigation("AccountBillItems");

                    b.Navigation("AccountBills");

                    b.Navigation("AccountMappings");

                    b.Navigation("AssetCategoryGlAccuDepres");

                    b.Navigation("AssetCategoryGlCosts");

                    b.Navigation("AssetCategoryGlDepreExps");

                    b.Navigation("AssetCategoryGlGains");

                    b.Navigation("AssetCategoryGlLosses");

                    b.Navigation("ClearBills");

                    b.Navigation("CoaBalances");

                    b.Navigation("CustomerPaymentEntries");

                    b.Navigation("CustomerPrePayments");

                    b.Navigation("Glentries");

                    b.Navigation("InverseParent");

                    b.Navigation("PurchaseRefunds");

                    b.Navigation("Refunds");

                    b.Navigation("SupplierPayments");

                    b.Navigation("TransactionJournals");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ClearBill", b =>
                {
                    b.Navigation("AccountBills");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Commune", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Company", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Employees");

                    b.Navigation("Glentries");

                    b.Navigation("InverseParent");

                    b.Navigation("ItemWarehouses");

                    b.Navigation("SaleTaxCharges");

                    b.Navigation("StockBalances");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Contact", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReceipts");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CreditNote", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Currency", b =>
                {
                    b.Navigation("AccountBills");

                    b.Navigation("Accounts");

                    b.Navigation("ClearBills");

                    b.Navigation("CoaBalances");

                    b.Navigation("Companies");

                    b.Navigation("Customers");

                    b.Navigation("ItemPrices");

                    b.Navigation("JournalEntries");

                    b.Navigation("PriceLists");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("Quotations");

                    b.Navigation("SaleOrders");

                    b.Navigation("SaleReturns");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CreditNotes");

                    b.Navigation("CustomerBalances");

                    b.Navigation("CustomerPaymentEntries");

                    b.Navigation("CustomerPrePayments");

                    b.Navigation("DeliveryNotes");

                    b.Navigation("Glentries");

                    b.Navigation("Invoices");

                    b.Navigation("Quotations");

                    b.Navigation("Refunds");

                    b.Navigation("SaleOrders");

                    b.Navigation("SaleReturns");

                    b.Navigation("SerialNos");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerGroup", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPaymentEntry", b =>
                {
                    b.Navigation("CustomerPaymentEntryReferences");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.CustomerPrePayment", b =>
                {
                    b.Navigation("CustomerPrePaymentReferences");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DebitNote", b =>
                {
                    b.Navigation("PurchaseRefunds");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DeliveryNote", b =>
                {
                    b.Navigation("DeliveryNoteDetails");

                    b.Navigation("Invoices");

                    b.Navigation("SaleReturns");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DeliveryType", b =>
                {
                    b.Navigation("DeliveryNotes");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.District", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Communes");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Domain", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Driver", b =>
                {
                    b.Navigation("DeliveryNotes");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.DriverStatus", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Employee", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("SalePeople");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ExpanseCategory", b =>
                {
                    b.Navigation("PurchaseReceiptExpanses");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Feature", b =>
                {
                    b.Navigation("Permission");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.FinanceBook", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Gender", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Salutations");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.HealthInsurance", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Invoice", b =>
                {
                    b.Navigation("CreditNotes");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Item", b =>
                {
                    b.Navigation("BarcodeItems");

                    b.Navigation("DeliveryNoteDetails");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("ItemImages");

                    b.Navigation("ItemInventories");

                    b.Navigation("ItemItems");

                    b.Navigation("ItemPrices");

                    b.Navigation("ItemTaxes");

                    b.Navigation("ItemVarrantUoms");

                    b.Navigation("ItemWarehouses");

                    b.Navigation("PurchaseInvoiceDetails");

                    b.Navigation("PurchaseItems");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseReceiptDetails");

                    b.Navigation("PurchaseReturnDetails");

                    b.Navigation("QuotationDetails");

                    b.Navigation("SaleOrderDetails");

                    b.Navigation("SaleReturnDetails");

                    b.Navigation("SerialNos");

                    b.Navigation("StockBalances");

                    b.Navigation("StockLedgerEntries");

                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemAttribute", b =>
                {
                    b.Navigation("ItemAttributeDetails");

                    b.Navigation("ItemAttributeValues");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemAttributeDetail", b =>
                {
                    b.Navigation("ItemAttributeValues");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemBrand", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("StockBalances");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemGroup", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Items");

                    b.Navigation("StockBalances");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemItem", b =>
                {
                    b.Navigation("ItemAttributeValues");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ItemVarrantUom", b =>
                {
                    b.Navigation("DeliveryNoteDetails");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("PurchaseInvoiceDetails");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseReceiptDetails");

                    b.Navigation("PurchaseReturnDetails");

                    b.Navigation("QuotationDetails");

                    b.Navigation("SaleOrderDetails");

                    b.Navigation("SaleReturnDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.JournalEntry", b =>
                {
                    b.Navigation("TransactionJournals");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.LetterHead", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.MaterialRequestType", b =>
                {
                    b.Navigation("ItemInventories");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.MenuItem", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PaymentMethod", b =>
                {
                    b.Navigation("ClearBills");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PriceList", b =>
                {
                    b.Navigation("CustomerGroups");

                    b.Navigation("Customers");

                    b.Navigation("ItemPrices");

                    b.Navigation("ItemWarehouses");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("Quotations");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Province", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseReceipts");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReceipt", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseReceiptDetails");

                    b.Navigation("PurchaseReceiptExpanses");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.PurchaseReturn", b =>
                {
                    b.Navigation("DebitNotes");

                    b.Navigation("PurchaseReturnDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Quotation", b =>
                {
                    b.Navigation("QuotationDetails");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Role", b =>
                {
                    b.Navigation("RoleMenus");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleOrder", b =>
                {
                    b.Navigation("AddressBillingAddresses");

                    b.Navigation("AddressShippingAddresses");

                    b.Navigation("CustomerPrePaymentReferences");

                    b.Navigation("DeliveryNotes");

                    b.Navigation("Invoices");

                    b.Navigation("Quotations");

                    b.Navigation("SaleOrderDetails");

                    b.Navigation("SaleReturns");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SalePerson", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("InverseParent");

                    b.Navigation("Quotations");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleReturn", b =>
                {
                    b.Navigation("SaleReturnDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleTaxCharge", b =>
                {
                    b.Navigation("SaleTaxDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SaleTaxType", b =>
                {
                    b.Navigation("SaleTaxDetails");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Salutation", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Customers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Supplier", b =>
                {
                    b.Navigation("AccountBills");

                    b.Navigation("DebitNotes");

                    b.Navigation("Glentries");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReceiptExpanses");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("PurchaseRefunds");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("SerialNos");

                    b.Navigation("SupplierPayments");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierGroup", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierPayment", b =>
                {
                    b.Navigation("SupplierPaymentReferences");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.SupplierType", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.TermCondition", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("CustomerGroups");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Territory", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.TransactionType", b =>
                {
                    b.Navigation("AccountBills");

                    b.Navigation("AccountMappings");

                    b.Navigation("ClearBills");

                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Uom", b =>
                {
                    b.Navigation("ItemInventories");

                    b.Navigation("ItemVarrantUoms");

                    b.Navigation("Items");

                    b.Navigation("PurchaseItems");

                    b.Navigation("StockBalances");

                    b.Navigation("StockLedgerEntries");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.ValuationMethod", b =>
                {
                    b.Navigation("ItemInventories");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Village", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EFCoreAIGS.EF_ERP.Warehouse", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Customers");

                    b.Navigation("DeliveryNotes");

                    b.Navigation("InverseParent");

                    b.Navigation("Invoices");

                    b.Navigation("ItemWarehouses");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("Quotations");

                    b.Navigation("SaleOrders");

                    b.Navigation("SaleReturns");

                    b.Navigation("SerialNos");

                    b.Navigation("StockBalances");

                    b.Navigation("StockLedgerEntries");

                    b.Navigation("StockMoves");
                });
#pragma warning restore 612, 618
        }
    }
}
